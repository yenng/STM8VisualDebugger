/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jni.h"
/* Header for class demo_jni_Main */

#ifndef _Included_demo_jni_Main
#define _Included_demo_jni_Main
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     demo_jni_Main
 * Method:    sayHelloWorld
 * Signature: ()V
 */
    
typedef enum RegisterName RegisterName;
enum RegisterName {
  UNKNOWN_REG,
  A_REG,
  X_REG,
  Y_REG,
  SP_REG,
  PC_REG,
  CC_REG,
};

typedef enum StallReason StallReason;
enum StallReason {
  NOT_STALLED,
  STEP_STALL,
  SOFTWARE_BREAKPOINT,
  HARDWARE_BREAKPOINT,
};

JNIEXPORT void JNICALL Java_demo_1jni_Main_sayHelloWorld
  (JNIEnv *, jobject);

JNIEXPORT int JNICALL stm8FlashData
(JNIEnv *, jobject, jchar *data, jint startAddress, jint size);

JNIEXPORT int JNICALL stm8Halt
(JNIEnv *, jobject);

JNIEXPORT StallReason JNICALL stm8HasCpuStalled
(JNIEnv *, jobject);

JNIEXPORT void JNICALL stm8Resume
(JNIEnv *, jobject);

JNIEXPORT void JNICALL stm8Run
(JNIEnv *, jobject, jint address);

JNIEXPORT int JNICALL stm8Step
(JNIEnv *, jobject, jint count);

JNIEXPORT int JNICALL stm8ReadByte
(JNIEnv *, jobject);

JNIEXPORT int JNICALL stm8ReadHalfWord
(JNIEnv *, jobject);

JNIEXPORT int JNICALL stm8ReadWord
(JNIEnv *, jobject);

JNIEXPORT int JNICALL stm8ReadRegister
(JNIEnv *, jobject, RegisterName register);

JNIEXPORT int JNICALL stm8HardwareReset
(JNIEnv *, jobject, jint haltOnReset);

JNIEXPORT int JNICALL stm8SoftwareReset
(JNIEnv *, jobject, jint haltOnReset);

JNIEXPORT int JNICALL stm8EnableSoftwareBreak
(JNIEnv *, jobject);

JNIEXPORT void JNICALL stm8SetInstructionBreakpointAt
(JNIEnv *, jobject, jint address);

JNIEXPORT void JNICALL stm8SetInstructionBreakpointsWithinRange
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetInstructionBreakpointsOutsideRange
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetDataWriteWatchpointsAt
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetDataWriteWatchpointsWithinRange
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetDataWriteWatchpointsOutsideRange
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetDataReadWatchpointsAt
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetDataReadWatchpointsWithinRange
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetDataReadWatchpointsOutsideRange
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetDataReadWriteWatchpointsAt
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetDataReadWriteWatchpointsWithinRange
(JNIEnv *, jobject, jint address1, jint address2);

JNIEXPORT void JNICALL stm8SetDataReadWriteWatchpointsOutsideRange
(JNIEnv *, jobject, jint address1, jint address2);



#ifdef __cplusplus
}
#endif
#endif
